import { getSession, signOut, useSession } from "next-auth/react"
import Head from "next/head"
import { useRouter } from "next/router"
import { AnimatePresence } from "framer-motion"
import Header from "../components/Header"
import Sidebar from "../components/Sidebar"
import Feed from "../components/Feed"
import Modal from "../components/Modal"
import { useRecoilState } from "recoil"
import { modalState, modalTypeState } from "../atoms/modalAtom"
import { connectToDatabase } from "../utils/mongodb"

export default function Home({ posts }) {
  console.log(posts)
  const [modalOpen, setModalOpen] = useRecoilState(modalState)
  const [modalType, setModalType] = useRecoilState(modalTypeState)

  const router = useRouter()
  const { status } = useSession({
    required: true,
    onUnauthenticated() {
      router.push("/home")
    },
  })

  return (
    <div className="bg-[#F3F2EF] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6">
      <Head>
        <title>Feed | LinkedIn</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <button
        className="px-2 py-2 border-emerald-600 border"
        onClick={() => signOut()}
      >
        Signout
      </button> */}
      <Header />
      <main className="flex justify-center gap-x-5 px-4 sm:px-12">
        <div className="flex flex-col md:flex-row gap-5">
          <Sidebar />
          <Feed posts={posts} />
        </div>
        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>
      </main>
    </div>
  )
}

// get the actual user's login data

export async function getServerSideProps(context) {
  // check if the user is authenticated on the server

  const session = await getSession(context)
  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: "false",
      },
    }
  }
  // get posts on SSR
  const { db } = await connectToDatabase()
  const posts = await db
    .collection("posts")
    .find()
    .sort({ timestamp: -1 })
    .toArray()

  //get google news api

  return {
    props: {
      session,
      posts: posts.map((post) => ({
        _id: post._id.toString(),
        input: post.input,
        photoUrl: post.photoUrl,
        username: post.username,
        email: post.email,
        userImg: post.userImg,
        createdAt: post.createdAt,
      })),
    },
  }
}
